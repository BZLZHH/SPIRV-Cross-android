name: Android ARM64 Build

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build-android-arm64:
    name: "Build Android ARM64"
    runs-on: ubuntu-latest
    env:
      ANDROID_NDK_VERSION: "25.2.9519653"
      ANDROID_ABI: "arm64-v8a"
      ANDROID_STL: "c++_shared"

    steps:
      - uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Android NDK
        run: |
            mkdir -p $HOME/android-ndk
            wget https://dl.google.com/android/repository/android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip
            unzip -q android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip -d $HOME/android-ndk
            echo "ANDROID_NDK_HOME=$HOME/android-ndk/android-ndk-${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache glslang / SPIRV-Tools
        id: cache-externals
        uses: actions/cache@v3
        with:
          path: external/*-build/output
          key: android-externals-${{ hashFiles('checkout_glslang_spirv_tools.sh', 'build_glslang_spirv_tools.sh') }}

      - name: Pull glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./checkout_glslang_spirv_tools.sh

      - name: Build glslang / SPIRV-Tools (Android)
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          export ANDROID_NDK=$ANDROID_NDK_ROOT
          ./build_glslang_spirv_tools.sh \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ env.ANDROID_ABI }} \
            -DANDROID_STL=${{ env.ANDROID_STL }} \
            -DANDROID_NATIVE_API_LEVEL=21 \
            Release 4

      - name: Configure SPIRV-Cross (Android)
        shell: bash
        run: |
          mkdir build-android
          cd build-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ env.ANDROID_ABI }} \
            -DANDROID_STL=${{ env.ANDROID_STL }} \
            -DANDROID_NATIVE_API_LEVEL=21 \
            -DSPIRV_CROSS_WERROR=ON \
            -DSPIRV_CROSS_MISC_WARNINGS=ON \
            -DSPIRV_CROSS_SHARED=ON \
            -DCMAKE_INSTALL_PREFIX=output \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON

      - name: Build SPIRV-Cross
        shell: bash
        working-directory: ${{github.workspace}}/build-android
        run: |
          cmake --build . --config Release --parallel 4
          cmake --build . --config Release --target install

      - uses: actions/upload-artifact@v4
        with:
          name: android-arm64-binaries
          path: build-android/output

  reuse:
    name: "REUSE license check"
    runs-on: ubuntu-latest
    container: khronosgroup/docker-images:asciidoctor-spec
    steps:
      - uses: actions/checkout@v3
      - name: license-check
        run: reuse lint
