# Copyright 2020-2021 The Khronos Group, Inc.
# SPDX-License-Identifier: Apache-2.0

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: "Build Android aarch64"
    runs-on: ubuntu-22.04
    env:
      PARALLEL: -j 2

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Setup Android NDK
        uses: android-actions/setup-ndk@v2
        with:
          ndk-version: '25b'

      - name: Cache glslang / SPIRV-Tools
        id: cache-externals
        uses: actions/cache@v3
        with:
          path: external/*-build/output
          key: android-externals ${{ hashFiles('checkout_glslang_spirv_tools.sh', 'build_glslang_spirv_tools.sh') }}

      - name: Pull glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./checkout_glslang_spirv_tools.sh

      - name: Build glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./build_glslang_spirv_tools.sh Release 4

      - name: Configure SPIRV-Cross
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. \
            -DSPIRV_CROSS_WERROR=ON \
            -DSPIRV_CROSS_MISC_WARNINGS=ON \
            -DSPIRV_CROSS_SHARED=ON \
            -DCMAKE_INSTALL_PREFIX=output \
            -DCMAKE_BUILD_TYPE=Release \
            -DSPIRV_CROSS_ENABLE_TESTS=ON \
            -DCMAKE_SYSTEM_NAME=Android \
            -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
            -DCMAKE_ANDROID_NDK=$ANDROID_NDK_HOME \
            -DCMAKE_ANDROID_STL_TYPE=c++_static

      - name: Build SPIRV-Cross
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          cmake --build . --config Release --parallel 4
          cmake --build . --config Release --target install

      - uses: actions/upload-artifact@v4
        with:
          name: android-arm64-binaries
          path: build/output

  reuse:
    name: "REUSE license check"
    runs-on: ubuntu-latest
    container: khronosgroup/docker-images:asciidoctor-spec

    steps:
      - uses: actions/checkout@v3

      # REUSE license checker
      - name: license-check
        run: |
          reuse lint
